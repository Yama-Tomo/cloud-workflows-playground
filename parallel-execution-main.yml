main:
  params: [args]
  steps:
  - define_workflow_vars:
      assign:
        - result: "worker did not run"
        - queueIndex: 0

  - get_worker_queue:
      try:
        call: http.get
        args:
          url: ${args.create_queue_endpoint}
          auth:
            type: OIDC
        result: queue
      retry:
        predicate: ${retry_predicate}
        max_retries: 2
        backoff:
          initial_delay: 2
          max_delay: 10
          multiplier: 2

  - check_end_of_queue:
      switch:
        - condition: ${len(queue.body) > queueIndex}
          next: invoke_worker
      next: return_output

  - invoke_worker:
      try:
        call: experimental.executions.map
        args:
          workflow_id: parallel-execution-worker
          arguments: ${queue.body[queueIndex]}
        result: result
      except:
        as: e
        steps:
          - throwError:
              raise: "worker でエラーが発生しました"
      next: increment_queue_index

  - increment_queue_index:
      steps:
        - increment:
            assign:
              - queueIndex: ${queueIndex+1}
        - logging:
            call: sys.log
            args:
              text: ${"processing done (" + string(queueIndex) + " / " + string(len(queue.body)) + ")"}
              severity: INFO
      next: check_end_of_queue

  - return_output:
      return: ${result}

retry_predicate:
  params: [e]
  steps:
    - what_to_repeat:
        switch:
        - condition: ${e.code >= 500}
          return: True
    - otherwise:
        return: False
